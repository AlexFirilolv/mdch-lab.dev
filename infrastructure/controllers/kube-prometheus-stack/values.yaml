defaultRules:
  rules:
    etcd: false

alertmanager:
  ingress:
    enabled: true
    ingressClassName: cilium
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-cluster-issuer
    hosts: 
      - alertmanager.mdch-lab.dev
    paths:
      - /
    pathType: Prefix
    tls:
      - secretName: alertmanager-general-tls
        hosts:
        - alertmanager.mdch-lab.dev
  alertmanagerSpec:
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: longhorn
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 5Gi
    forceEnableClusterMode: true

grafana:
  ingress:
    enabled: true
    ingressClassName: cilium
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-cluster-issuer
    hosts:
      - grafana.mdch-lab.dev
    path: /
    tls:
      - secretName: grafana-general-tls
        hosts:
        - grafana.mdch-lab.dev
  persistence:
    enabled: true
    type: sts
    storageClassName: longhorn
    accessModes:
      - ReadWriteOnce
    size: 5Gi
    finalizers:
      - kubernetes.io/pvc-protection

kubeControllerManager:
  enabled: true
  endpoints: ['192.168.1.10']
  service:
    port: 10257
    targetPort: 10257
  serviceMonitor:
    https: true
    insecureSkipVerify: true

kubeEtcd:
  enabled: false

kubeScheduler:
  enabled: true
  endpoints: ['192.168.1.10']
  service:
    port: 10259
    targetPort: 10259
  serviceMonitor:
    https: true
    insecureSkipVerify: true

kubeProxy:
  enabled: false

prometheus:
  ingress:
    enabled: true
    ingressClassName: cilium
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-cluster-issuer
    hosts:
      - prometheus.mdch-lab.dev
    paths:
      - /
    pathType: Prefix
    tls:
      - secretName: prometheus-general-tls
        hosts:
          - prometheus.mdch-lab.dev
  prometheusSpec:
    additionalScrapeConfigs:
      - job_name: kubernetes-pods
        honor_timestamps: true
        scrape_interval: 5s
        scrape_timeout: 5s
        metrics_path: /metrics
        scheme: http
        follow_redirects: true
        enable_http2: true
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            regex: "true"
            action: keep
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            regex: (.+)
            target_label: __metrics_path__
            replacement: $1
            action: replace
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            regex: ([^:]+)(?::\d+)?;(\d+)
            target_label: __address__
            replacement: $1:$2
            action: replace
          - regex: __meta_kubernetes_pod_label_(.+)
            action: labelmap
          - source_labels: [__meta_kubernetes_namespace]
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: kubernetes_pod_name
    podMonitorSelectorNilUsesHelmValues: false
    serviceMonitorSelectorNilUsesHelmValues: false
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: longhorn
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 20Gi

cleanPrometheusOperatorObjectNames: true